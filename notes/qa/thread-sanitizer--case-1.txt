WARNING: ThreadSanitizer: data race (pid=3987481)
  Read of size 4 at 0x7ffff0c4ec08 by thread T25:
    #0 bool glm::operator==<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&) /usr/include/glm/./ext/../detail/type_vec3.inl:1046:73 (glos+0x101ff8) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #1 glos::object::is_Mmw_valid() const /home/c/w/glos/src/engine/objects.hpp:151:21 (glos+0x101ff8)
    #2 glos::object::get_updated_Mmw() /home/c/w/glos/src/engine/objects.hpp:116:9 (glos+0x101ff8)
    #3 glos::object::update_planes_world_coordinates() /home/c/w/glos/src/engine/objects.hpp:175:26 (glos+0x10ccc6) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #4 glos::cell::bounding_planes_are_in_collision(glos::object*, glos::object*) /home/c/w/glos/src/engine/cell.hpp:330:9 (glos+0x10ccc6)
    #5 glos::cell::process_check_collisions_list() /home/c/w/glos/src/engine/cell.hpp:190:11 (glos+0x10c92c) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #6 glos::cell::resolve_collisions() /home/c/w/glos/src/engine/cell.hpp:79:5 (glos+0x10bf44) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #7 auto glos::grid::resolve_collisions()::'lambda'(auto&)::operator()<std::array<glos::cell, 16ul>>(auto&) const /home/c/w/glos/src/engine/grid.hpp:47:27 (glos+0x10be55) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #8 auto __pstl::__unseq_backend::__simd_walk_1<std::array<glos::cell, 16ul>*, long, glos::grid::resolve_collisions()::'lambda'(auto&)>(auto, long, glos::grid::resolve_collisions()::'lambda'(auto&)) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/unseq_backend_simd.h:33:9 (glos+0x10bdca) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #9 void __pstl::__internal::__brick_walk1<std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&)>(auto, auto, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/algorithm_impl.h:102:5 (glos+0x10bdca)
    #10 void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)::operator()(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*) const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/algorithm_impl.h:123:43 (glos+0x10bdca)
    #11 __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)>::operator()(tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*> const&) const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/parallel_backend_tbb.h:91:9 (glos+0x10bdca)
    #12 auto std::__invoke_impl<void, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>(std::__invoke_other, std::array<glos::cell, 16ul>*&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:61:14 (glos+0x10bdca)
    #13 std::__invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>::type std::__invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:96:14 (glos+0x10bdca)
    #14 std::invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>::type std::invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/functional:113:14 (glos+0x10bdca)
    #15 std::invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>::type tbb::detail::d0::invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&) /usr/include/tbb/../oneapi/tbb/detail/_utils.h:356:12 (glos+0x10bdca)
    #16 tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)>, tbb::detail::d1::auto_partitioner const>::run_body(tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:117:9 (glos+0x10bdca)
    #17 void tbb::detail::d1::dynamic_grainsize_mode<tbb::detail::d1::adaptive_mode<tbb::detail::d1::auto_partition_type>>::work_balance<tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)>, tbb::detail::d1::auto_partitioner const>, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>>(auto&, std::array<glos::cell, 16ul>*&, tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/partitioner.h:435:19 (glos+0x10bdca)
    #18 void tbb::detail::d1::partition_type_base<tbb::detail::d1::auto_partition_type>::execute<tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)>, tbb::detail::d1::auto_partitioner const>, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>>(auto&, std::array<glos::cell, 16ul>*&, tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/partitioner.h:289:16 (glos+0x10a1e9) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #19 tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul>*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul>*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*, glos::grid::resolve_collisions()::'lambda'(auto&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul>*, std::array<glos::cell, 16ul>*)>, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:170:18 (glos+0x109bac) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #20 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<false, tbb::detail::r1::outermost_worker_waiter>(tbb::detail::d1::task*, tbb::detail::r1::outermost_worker_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:323:39 (libtbb.so.12+0x2d2ba) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #21 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<tbb::detail::r1::outermost_worker_waiter>(tbb::detail::d1::task*, tbb::detail::r1::outermost_worker_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:459:60 (libtbb.so.12+0x2d2ba)
    #22 tbb::detail::r1::arena::process(tbb::detail::r1::thread_data&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/arena.cpp:218:61 (libtbb.so.12+0x2d2ba)
    #23 tbb::detail::r1::thread_dispatcher_client::process(tbb::detail::r1::thread_data&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/thread_dispatcher_client.h:36:25 (libtbb.so.12+0x2d2ba)
    #24 tbb::detail::r1::thread_dispatcher::process(rml::job&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/thread_dispatcher.cpp:183:28 (libtbb.so.12+0x2d2ba)

  Previous write of size 8 at 0x7ffff0c4ec08 by thread T19:
    #0 glm::vec<3, float, (glm::qualifier)0>& glm::vec<3, float, (glm::qualifier)0>::operator+=<float>(glm::vec<3, float, (glm::qualifier)0> const&) /usr/include/glm/./ext/../detail/type_vec3.inl:246:11 (glos+0x101e17) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #1 glos::object::update() /home/c/w/glos/src/engine/objects.hpp:88:14 (glos+0x101e17)
    #2 cube::update() /home/c/w/glos/src/application/objects/cube.hpp:31:18 (glos+0x10192c) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #3 glos::cell::update() const /home/c/w/glos/src/engine/cell.hpp:66:23 (glos+0x1095b0) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #4 auto glos::grid::update()::'lambda'(auto const&)::operator()<std::array<glos::cell, 16ul>>(auto const&) const /home/c/w/glos/src/engine/grid.hpp:28:27 (glos+0x1095b0)
    #5 auto __pstl::__unseq_backend::__simd_walk_1<std::array<glos::cell, 16ul> const*, long, glos::grid::update()::'lambda'(auto const&)>(auto, long, glos::grid::update()::'lambda'(auto const&)) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/unseq_backend_simd.h:33:9 (glos+0x1095b0)
    #6 void __pstl::__internal::__brick_walk1<std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&)>(auto, auto, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/algorithm_impl.h:102:5 (glos+0x10947d) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #7 void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)::operator()(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*) const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/algorithm_impl.h:123:43 (glos+0x10947d)
    #8 __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>::operator()(tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*> const&) const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/parallel_backend_tbb.h:91:9 (glos+0x10947d)
    #9 auto std::__invoke_impl<void, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>(std::__invoke_other, std::array<glos::cell, 16ul> const*&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:61:14 (glos+0x10947d)
    #10 std::__invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>::type std::__invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:96:14 (glos+0x10947d)
    #11 std::invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>::type std::invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&) /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/functional:113:14 (glos+0x10947d)
    #12 std::invoke_result<auto, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>::type tbb::detail::d0::invoke<__pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)> const&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&>(auto&&, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&) /usr/include/tbb/../oneapi/tbb/detail/_utils.h:356:12 (glos+0x10947d)
    #13 tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>, tbb::detail::d1::auto_partitioner const>::run_body(tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:117:9 (glos+0x10947d)
    #14 void tbb::detail::d1::dynamic_grainsize_mode<tbb::detail::d1::adaptive_mode<tbb::detail::d1::auto_partition_type>>::work_balance<tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>, tbb::detail::d1::auto_partitioner const>, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>>(auto&, std::array<glos::cell, 16ul> const*&, tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/partitioner.h:435:19 (glos+0x10947d)
    #15 void tbb::detail::d1::partition_type_base<tbb::detail::d1::auto_partition_type>::execute<tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>, tbb::detail::d1::auto_partitioner const>, tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>>(auto&, std::array<glos::cell, 16ul> const*&, tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/partitioner.h:289:16 (glos+0x108ee9) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #16 tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:170:18 (glos+0x1088ac) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #17 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<false, tbb::detail::r1::outermost_worker_waiter>(tbb::detail::d1::task*, tbb::detail::r1::outermost_worker_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:323:39 (libtbb.so.12+0x2d2ba) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #18 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<tbb::detail::r1::outermost_worker_waiter>(tbb::detail::d1::task*, tbb::detail::r1::outermost_worker_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:459:60 (libtbb.so.12+0x2d2ba)
    #19 tbb::detail::r1::arena::process(tbb::detail::r1::thread_data&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/arena.cpp:218:61 (libtbb.so.12+0x2d2ba)
    #20 tbb::detail::r1::thread_dispatcher_client::process(tbb::detail::r1::thread_data&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/thread_dispatcher_client.h:36:25 (libtbb.so.12+0x2d2ba)
    #21 tbb::detail::r1::thread_dispatcher::process(rml::job&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/thread_dispatcher.cpp:183:28 (libtbb.so.12+0x2d2ba)

  Location is heap block of size 33554432 at 0x7ffff0c01000 allocated by main thread:
    #0 calloc <null> (glos+0x64aea) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #1 glos::o1store<glos::object, 65536ul, 0u, false, true, 512ul>::o1store() /home/c/w/glos/src/engine/o1store.hpp:36:34 (glos+0xe9bc2) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #2 glos::objects::objects() /home/c/w/glos/src/engine/objects.hpp:238:13 (glos+0x34e1d) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #3 __cxx_global_var_init.4 /home/c/w/glos/src/engine/objects.hpp:243:16 (glos+0x34e1d)
    #4 _GLOBAL__sub_I_main.cpp /home/c/w/glos/src/main.cpp (glos+0x34e1d)
    #5 call_init csu/../csu/libc-start.c:145:3 (libc.so.6+0x2a303) (BuildId: 08134323d00289185684a4cd177d202f39c2a5f3)

  Thread T25 (tid=3987560, running) created by thread T24 at:
    #0 pthread_create <null> (glos+0x6623f) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #1 tbb::detail::r1::rml::internal::thread_monitor::launch(void* (*)(void*), void*, unsigned long) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/rml_thread_monitor.h:208:29 (libtbb.so.12+0x21bec) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #2 tbb::detail::r1::rml::private_worker::wake_or_launch() /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/private_server.cpp:305:51 (libtbb.so.12+0x21bec)
    #3 tbb::detail::r1::rml::private_server::wake_some(int) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/private_server.cpp:412:27 (libtbb.so.12+0x21bec)

  Thread T19 (tid=3987553, running) created by main thread at:
    #0 pthread_create <null> (glos+0x6623f) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #1 tbb::detail::r1::rml::internal::thread_monitor::launch(void* (*)(void*), void*, unsigned long) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/rml_thread_monitor.h:208:29 (libtbb.so.12+0x21bec) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #2 tbb::detail::r1::rml::private_worker::wake_or_launch() /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/private_server.cpp:305:51 (libtbb.so.12+0x21bec)
    #3 tbb::detail::r1::rml::private_server::wake_some(int) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/private_server.cpp:412:27 (libtbb.so.12+0x21bec)
    #4 tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:170:18 (glos+0x1088ac) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #5 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<false, tbb::detail::r1::external_waiter>(tbb::detail::d1::task*, tbb::detail::r1::external_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:323:39 (libtbb.so.12+0x2acbc) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #6 tbb::detail::d1::task* tbb::detail::r1::task_dispatcher::local_wait_for_all<tbb::detail::r1::external_waiter>(tbb::detail::d1::task*, tbb::detail::r1::external_waiter&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.h:459:60 (libtbb.so.12+0x2acbc)
    #7 tbb::detail::r1::task_dispatcher::execute_and_wait(tbb::detail::d1::task*, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/task_dispatcher.cpp:168:36 (libtbb.so.12+0x2acbc)
    #8 void tbb::detail::d1::parallel_for<tbb::detail::d1::blocked_range<std::array<glos::cell, 16ul> const*>, __pstl::__tbb_backend::__parallel_for_body<std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>>(auto const&, std::array<glos::cell, 16ul> const* const&) /usr/include/tbb/../oneapi/tbb/parallel_for.h:229:5 (glos+0x1084b7) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #9 void __pstl::__tbb_backend::__parallel_for<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&))::'lambda'()::operator()() const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/pstl/parallel_backend_tbb.h:105:9 (glos+0x1084b7)
    #10 tbb::detail::d1::task_arena_function<void __pstl::__tbb_backend::__parallel_for<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, void __pstl::__internal::__pattern_walk1<__pstl::execution::v1::parallel_unsequenced_policy const&, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&), std::integral_constant<bool, true>, std::integral_constant<bool, true>)::'lambda'()::operator()() const::'lambda'(std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*)>(auto&&, std::array<glos::cell, 16ul> const*, std::array<glos::cell, 16ul> const*, glos::grid::update()::'lambda'(auto const&))::'lambda'(), void>::operator()() const /usr/include/tbb/../oneapi/tbb/task_arena.h:68:9 (glos+0x1084b7)
    #11 operator() /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/arena.cpp:865:10 (libtbb.so.12+0x17fd0) (BuildId: 91dd0c49c55c7dd6f455dc466ded540122adb4c3)
    #12 on_completion<tbb::detail::r1::isolate_within_arena(tbb::detail::d1::delegate_base&, intptr_t)::<lambda()> > /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/../../include/oneapi/tbb/detail/_template_helpers.h:230:13 (libtbb.so.12+0x17fd0)
    #13 tbb::detail::r1::isolate_within_arena(tbb::detail::d1::delegate_base&, long) /usr/src/onetbb-2021.11.0-2ubuntu2/src/tbb/arena.cpp:866:21 (libtbb.so.12+0x17fd0)
    #14 glos::engine::run() /home/c/w/glos/src/engine/engine.hpp:305:9 (glos+0xe91c9) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)
    #15 main /home/c/w/glos/src/main.cpp:34:16 (glos+0xe67ea) (BuildId: 0a83023f8a7feecf971e200f50fae98d0d43b812)

SUMMARY: ThreadSanitizer: data race /usr/include/glm/./ext/../detail/type_vec3.inl:1046:73 in bool glm::operator==<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)

---------------------------------------------------------------------------------------------------
analysis:
---------------------------------------------------------------------------------------------------
glos::grid::update() and glos::grid::resolve_collisions() do not run in parallel => false positive?

